#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
    struct node* prev;
};

struct node *head, *tail, *newnode, *temp;

void insertAtFirst() {
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("\nEnter Data: ");
    scanf("%d", &newnode->data);
    newnode->prev = NULL;
    newnode->next = head;

    if (head != NULL)
        head->prev = newnode;
    else
        tail = newnode;  // List was empty

    head = newnode;
}

void insertAtLast() {
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("\nEnter Data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    if (tail == NULL) {
        newnode->prev = NULL;
        head = tail = newnode;
    } else {
        newnode->prev = tail;
        tail->next = newnode;
        tail = newnode;
    }
}

void insertAfterPosition() {
    int pos, i = 1;
    printf("\nEnter position after which you want to insert: ");
    scanf("%d", &pos);

    temp = head;
    while (i < pos && temp != NULL) {
        temp = temp->next;
        i++;
    }

    if (temp == NULL) {
        printf("Invalid position!\n");
    } else {
        newnode = (struct node*)malloc(sizeof(struct node));
        printf("Enter data: ");
        scanf("%d", &newnode->data);

        newnode->next = temp->next;
        newnode->prev = temp;

        if (temp->next != NULL)
            temp->next->prev = newnode;
        else
            tail = newnode;

        temp->next = newnode;
    }
}

void dltAtFirst() {
    if (head == NULL) {
        printf("Linked List is Empty.\n");
    } else {
        temp = head;
        head = head->next;

        if (head != NULL)
            head->prev = NULL;
        else
            tail = NULL;  // List became empty

        free(temp);
    }
    printf("\n");
}

void dltAtLast() {
    if (tail == NULL) {
        printf("Linked List is Empty.\n");
    } else {
        temp = tail;
        tail = tail->prev;

        if (tail != NULL)
            tail->next = NULL;
        else
            head = NULL;  // List became empty

        free(temp);
    }
}

void deleteAfterPosition() {
    int pos, i = 1;
    printf("\nEnter position after which you want to delete: ");
    scanf("%d", &pos);

    temp = head;
    while (i < pos && temp != NULL) {
        temp = temp->next;
        i++;
    }

    if (temp == NULL || temp->next == NULL) {
        printf("Invalid position or no node exists after this position!\n");
    } else {
        struct node* delnode = temp->next;
        temp->next = delnode->next;

        if (delnode->next != NULL)
            delnode->next->prev = temp;
        else
            tail = temp;

        free(delnode);
        printf("Node deleted.\n");
    }
}

void display() {
    int i = 1;
    temp = head;

    printf("\nDoubly Linked List (Forward):\n");
    while (temp != NULL) {
        printf("Element %d: %d    Next: %p   Prev: %p\n", i, temp->data, temp->next, temp->prev);
        if (temp->next == NULL)
            tail = temp;  // Ensure tail is correct
        temp = temp->next;
        i++;
    }

    printf("\nDoubly Linked List (Reverse):\n");
    temp = tail;
    i = 1;
    while (temp != NULL) {
        printf("Element %d: %d    Prev: %p   Next: %p\n", i, temp->data, temp->prev, temp->next);
        temp = temp->prev;
        i++;
    }
    printf("\n");
}

void main() {
    head = tail = NULL;
    int ch = 0;

    while (ch != 9) {
        printf("\nChoose Operation:\n");
        printf("1. Insert At First\n");
        printf("2. Insert At Last\n");
        printf("3. Insert After Position\n");
        printf("4. Delete At First\n");
        printf("5. Delete At Last\n");
        printf("6. Delete After Position\n");
        printf("7. Display\n");
        printf("8. Exit\n");

        scanf("%d", &ch);

        switch (ch) {
            case 1: insertAtFirst(); break;
            case 2: insertAtLast(); break;
            case 3: insertAfterPosition(); break;
            case 4: dltAtFirst(); break;
            case 5: dltAtLast(); break;
            case 6: deleteAfterPosition(); break;
            case 7: display(); break;
            case 9: printf("Exiting Program...\n"); break;
            default: printf("Invalid choice!\n"); break;
        }
    }
}
