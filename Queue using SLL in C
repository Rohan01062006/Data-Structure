#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int data;
    struct node *next;
};

struct node *front = NULL, *rear = NULL;

void enqueue(int value) 
{
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    if (newNode == NULL) 
    {
        printf("Memory allocation failed\n");
        return;
    }
    newNode->data = value;
    newNode->next = NULL;

    if (rear == NULL) 
    {
        front = rear = newNode;
    } 
    else 
    {
        rear->next = newNode;
        rear = newNode;
    }
    printf("Enqueued Element: %d\n", value);
}

void dequeue() 
{
    if (front == NULL) 
    {
        printf("Queue is empty\n");
        return;
    }

    struct node *temp = front;
    printf("Dequeued Element: %d\n", temp->data);
    front = front->next;

    if (front == NULL) 
    {
        rear = NULL; 
    }
    free(temp);
}

void display() 
{
    if (front == NULL) 
    {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue Elements:\n");
    struct node *temp = front;
    int nodeNum = 1;

    while (temp != NULL) 
    {
        printf("Node %d | Data: %d | Address: %x | Next: %x\n", nodeNum, temp->data, temp,temp->next);
        temp = temp->next;
        nodeNum++;
    }
}

int main() 
{
    int operation, value;
    
    printf("\nEnter Choice: \n");

    while (1) 
    {
       
        printf("1] Enqueue\n2] Dequeue\n3] Display\n4] Exit\n");
        scanf("%d", &operation);

        switch (operation) {
            case 1:
                printf("Enter the number to enqueue: ");
                scanf("%d", &value);
                enqueue(value);
                break;

            case 2:
                dequeue();
                break;

            case 3:
                display();
                break;

            case 4:
                printf("Exiting Program\n");
                return 0;

            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
