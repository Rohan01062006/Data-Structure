#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node *head, *newnode, *temp, *prevnode;
int count = 0;

void insertAtFirst() {
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("\nEnter Data: ");
    scanf("%d", &newnode->data);

    newnode->next = head;
    head = newnode;
    count++;
}

void insertAtLast() {
    newnode = (struct node*)malloc(sizeof(struct node));
    printf("\nEnter Data: ");
    scanf("%d", &newnode->data);
    newnode->next = NULL;

    if (head == NULL) {
        head = newnode;
    } else {
        temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
    count++;
}

void insertAtPosition() {
    int pos, i = 1;
    printf("\nEnter position (between 1 and %d) to insert: ", count + 1);
    scanf("%d", &pos);

    if (pos < 1 || pos > count + 1) {
        printf("Invalid position!\n");
        return;
    }

    newnode = (struct node*)malloc(sizeof(struct node));
    printf("Enter data: ");
    scanf("%d", &newnode->data);

    if (pos == 1) {
        newnode->next = head;
        head = newnode;
    } else {
        temp = head;
        while (i < pos - 1) {
            temp = temp->next;
            i++;
        }
        newnode->next = temp->next;
        temp->next = newnode;
    }
    count++;
}

void dltAtFirst() {
    if (head == NULL) {
        printf("Linked List is Empty. Select Insertion Operation!!");
    } else {
        temp = head;
        head = head->next;
        free(temp);
        count--;
    }
    printf("\n");
}

void dltAtLast() {
    if (head == NULL) {
        printf("Linked List is Empty. Select Insertion Operation!!");
    } else {
        temp = head;
        if (temp->next == NULL) {
            head = NULL;
            free(temp);
        } else {
            while (temp->next != NULL) {
                prevnode = temp;
                temp = temp->next;
            }
            prevnode->next = NULL;
            free(temp);
        }
        count--;
    }
}

void deleteAtPosition() {
    int pos, i = 1;
    printf("\nEnter position (between 1 and %d) to delete: ", count);
    scanf("%d", &pos);

    if (pos < 1 || pos > count) {
        printf("Invalid position!\n");
        return;
    }

    if (pos == 1) {
        temp = head;
        head = head->next;
        free(temp);
    } else {
        temp = head;
        while (i < pos - 1) {
            temp = temp->next;
            i++;
        }
        struct node* delnode = temp->next;
        temp->next = delnode->next;
        free(delnode);
    }
    count--;
    printf("Node deleted.\n");
}

void display() {
    int i = 1;
    temp = head;
    printf("\nLinked List (Total nodes: %d):\n", count);
    while (temp != NULL) {
        printf("Element %d: %d    Address: %p \n", i, temp->data, temp->next);
        temp = temp->next;
        i++;
    }
    printf("\n");
}

void main() {
    head = NULL;
    int ch = 0;

    while (ch != 8) {
        printf("\nChoose Operation:\n");
        printf("1. Insert At First\n");
        printf("2. Insert At Last\n");
        printf("3. Insert At Position\n");
        printf("4. Delete At First\n");
        printf("5. Delete At Last\n");
        printf("6. Delete At Position\n");
        printf("7. Display\n");
        printf("8. Exit\n");

        scanf("%d", &ch);

        switch (ch) {
            case 1: insertAtFirst(); break;
            case 2: insertAtLast(); break;
            case 3: insertAtPosition(); break;
            case 4: dltAtFirst(); break;
            case 5: dltAtLast(); break;
            case 6: deleteAtPosition(); break;
            case 7: display(); break;
            case 8: printf("Exiting Program...\n"); break;
            default: printf("Invalid choice!\n"); break;
        }
    }
}
