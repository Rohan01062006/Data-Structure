
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    char name[100];
    int roll_no;
};

int main() {
    int n, i, pos;
    char choice;

    printf("Enter the number of students: ");
    scanf("%d", &n);

    // Dynamic memory allocation
    struct Student *students = (struct Student *)malloc(n * sizeof(struct Student));
    if (students == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    // Input student details
    for (i = 0; i < n; i++) {
        printf("\nEnter details for student %d:\n", i + 1);
        
        printf("Enter name: ");
        getchar();  // Clear the buffer
        fgets(students[i].name, sizeof(students[i].name), stdin);
        students[i].name[strcspn(students[i].name, "\n")] = '\0';  // Remove newline

        printf("Enter roll number: ");
        scanf("%d", &students[i].roll_no);
    }

    // Display student details
    printf("\nStudent Information:\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", students[i].name);
        printf("Roll No: %d\n", students[i].roll_no);
        printf("-------------------------\n");
    }

    // Insert student details
    do {
        printf("\nDo you want to insert another student? (y/n): ");
        scanf(" %c", &choice);
        if (choice == 'y') {
            printf("Enter the position to insert the new student (1 to %d): ", n + 1);
            scanf("%d", &pos);

            if (pos >= 1 && pos <= n + 1) {
                // Allocate additional memory
                students = (struct Student *)realloc(students, (n + 1) * sizeof(struct Student));
                if (students == NULL) {
                    printf("Memory reallocation failed!\n");
                    return 1;
                }

                // Shift elements to make space for the new student
                for (i = n; i >= pos; i--) {
                    students[i] = students[i - 1];
                }

                // Insert new student details
                printf("\nEnter details for the new student:\n");
                printf("Enter name: ");
                getchar();  // Clear the buffer
                fgets(students[pos - 1].name, sizeof(students[pos - 1].name), stdin);
                students[pos - 1].name[strcspn(students[pos - 1].name, "\n")] = '\0';  // Remove newline

                printf("Enter roll number: ");
                scanf("%d", &students[pos - 1].roll_no);

                n++;  // Increase count
            } else {
                printf("Invalid position! Please enter a position between 1 and %d.\n", n + 1);
            }
        }
    } while (choice == 'y');

    // Delete student details
    do {
        printf("\nDo you want to delete a student? (y/n): ");
        scanf(" %c", &choice);
        if (choice == 'y') {
            printf("Enter the position of the student to delete (1 to %d): ", n);
            scanf("%d", &pos);

            if (pos >= 1 && pos <= n) {
                // Shift elements to remove the student
                for (i = pos - 1; i < n - 1; i++) {
                    students[i] = students[i + 1];
                }

                // Reallocate memory
                students = (struct Student *)realloc(students, (n - 1) * sizeof(struct Student));
                if (students == NULL && n > 1) {  // Check only if n > 1 to avoid freeing NULL on last student deletion
                    printf("Memory reallocation failed!\n");
                    return 1;
                }

                n--;  // Decrease count
                printf("Student at position %d has been deleted.\n", pos);
            } else {
                printf("Invalid position! Please enter a position between 1 and %d.\n", n);
            }
        }
    } while (choice == 'y');

    // Display updated student details
    printf("\nUpdated Student Information:\n");
    for (i = 0; i < n; i++) {
        printf("Name: %s\n", students[i].name);
        printf("Roll No: %d\n", students[i].roll_no);
        printf("-------------------------\n");
    }

    // Free allocated memory
    free(students);

    return 0;
}

